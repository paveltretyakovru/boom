// Generated by CoffeeScript 1.10.0
(function() {
  window.onload = function() {

    /* 
    		 * ____ CONFIGS ____ #
     */
    var N, animation_count, animation_delay, animation_fun, animation_time_random_max, animtaion_time_random_min, boom, createSvgDiv, createSvgImage, generateClass, getRandom, grow, grow_max, grow_min, images, on_line, parent, rotate, rotate_max, rotate_min, showBoom, svg_class, svg_height, svg_margin_left, svg_margin_top, x_max, x_min, x_start, y_max, y_min, y_start;
    x_max = 700;
    y_max = 700;
    x_min = 0;
    y_min = 0;
    x_start = x_max / 2;
    y_start = y_max / 2;
    N = 1;
    on_line = 30;
    svg_height = 30;
    grow = true;
    grow_min = -1;
    grow_max = 1.5;
    rotate = true;
    rotate_min = 0;
    rotate_max = 270;
    animtaion_time_random_min = 1;
    animation_time_random_max = 3;
    animation_delay = 0;
    animation_fun = 'ease-out';
    animation_count = '1';
    svg_margin_left = '45%';
    svg_margin_top = '45%';
    svg_class = 'boom-svg';
    parent = document.getElementById('container-swg');
    images = ['https://upload.wikimedia.org/wikipedia/commons/3/35/Orange_question_mark.svg', 'https://upload.wikimedia.org/wikipedia/commons/a/a8/Cannabis_leaf.svg', 'https://upload.wikimedia.org/wikipedia/commons/a/a0/Circle_-_black_simple.svg', 'https://upload.wikimedia.org/wikipedia/commons/8/80/BSicon_exKDSTr_lime.svg', 'https://upload.wikimedia.org/wikipedia/commons/0/0d/BSicon_exDBHFa_jade.svg', 'https://upload.wikimedia.org/wikipedia/commons/4/48/BSicon_exGIPl.svg'];

    /* 
    		 * _____ END CONFIGS ____ #
     */
    getRandom = function(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    };
    createSvgDiv = function(width, height) {
      var div;
      div = document.createElement('div');
      div.style.width = width + 'px';
      div.style.height = height + 'px';
      if (div.classList) {
        div.classList.add(svg_class);
      } else {
        div.className += ' ' + svg_class;
      }
      return div;
    };
    createSvgImage = function(src) {
      var image;
      image = document.createElement('img');
      image.src = src;
      image.style.left = svg_margin_left;
      image.style.top = svg_margin_top;
      image.style.position = 'relative';
      image.style.height = svg_height + 'px';
      return image;
    };
    generateClass = function(x, y) {
      var deg, id, name_class, name_keyframe, newStyles, size, styleElement, transform_val;
      styleElement = document.createElement('style');
      styleElement.type = 'text/css';
      id = 'svg' + N;
      name_class = id + '-class';
      name_keyframe = id + '-keyframe';
      deg = 0;
      if (rotate) {
        deg = getRandom(rotate_min, rotate_max);
      }
      size = 1;
      if (grow) {
        size = getRandom(grow_min, grow_max);
      }
      transform_val = 'translate(' + x + 'px , ' + y + 'px) rotate(' + deg + 'deg) scale(' + size + ')' + '; opacity: 0; display:none; } ';
      console.log('N:' + N + '; ' + transform_val);
      newStyles = document.createTextNode('' + '.' + name_class + '{' + ' animation:' + name_keyframe + ' ' + (Math.random() * (animation_time_random_max - animtaion_time_random_min) + animtaion_time_random_min) + 's ' + animation_delay + 's ' + animation_fun + ' ' + animation_count + '; ' + 'animation-fill-mode: forwards;' + '-webkit-animation:\'' + name_keyframe + '\' ' + (Math.random() * (animation_time_random_max - animtaion_time_random_min) + animtaion_time_random_min) + 's ' + animation_delay + 's ' + animation_fun + ' ' + animation_count + '; ' + '-webkit-animation-fill-mode: forwards;' + '} \n' + '@-webkit-keyframes ' + name_keyframe + ' {' + '\n' + 'from { opacity: 1 }' + '\n' + '50%  { opacity: 1; display:none; }' + '\n' + '60%  { opacity: 0; display:none; }' + '\n' + 'to { -webkit-transform: ' + transform_val + '\n' + '}' + '\n' + '@keyframes ' + name_keyframe + ' {' + '\n' + 'from { opacity: 1 }' + '\n' + '70%  { opacity: 1; display:none; }' + '\n' + '80%  { opacity: 0; display:none; }' + '\n' + 'to { transform: ' + transform_val + '\n' + '}');
      styleElement.appendChild(newStyles);
      document.getElementsByTagName('head')[0].appendChild(styleElement);
      console.log(newStyles);
      N++;
      return name_class;
    };
    boom = document.getElementById('button-boom');
    boom.addEventListener('click', function() {
      console.log('Boom!');
      return showBoom();
    });
    return showBoom = function() {
      var i, j, k, l, new_class, new_div, new_img, number, ref, ref1, ref2, ref3, results, x, y;
      parent.innerHTML = '';
      for (number = i = 1, ref = on_line; 1 <= ref ? i <= ref : i >= ref; number = 1 <= ref ? ++i : --i) {
        x = x_start - Math.floor((x_max / on_line) * number);
        y = y_start * -1;
        new_class = generateClass(x, y);
        new_div = createSvgDiv(x_max, y_max);
        new_img = createSvgImage(images[Math.floor(Math.random() * images.length)]);
        if (new_img.classList) {
          new_img.classList.add(new_class);
        } else {
          new_img.className += ' ' + new_class;
        }
        new_div.appendChild(new_img);
        parent.appendChild(new_div);
      }
      for (number = j = 1, ref1 = on_line; 1 <= ref1 ? j <= ref1 : j >= ref1; number = 1 <= ref1 ? ++j : --j) {
        x = x_start;
        y = y_start - Math.floor((y_max / on_line) * number);
        new_class = generateClass(x, y);
        new_div = createSvgDiv(x_max, y_max);
        new_img = createSvgImage(images[Math.floor(Math.random() * images.length)]);
        if (new_img.classList) {
          new_img.classList.add(new_class);
        } else {
          new_img.className += ' ' + new_class;
        }
        new_div.appendChild(new_img);
        parent.appendChild(new_div);
      }
      for (number = k = 1, ref2 = on_line; 1 <= ref2 ? k <= ref2 : k >= ref2; number = 1 <= ref2 ? ++k : --k) {
        x = x_start - Math.floor((x_max / on_line) * number);
        y = y_start;
        new_class = generateClass(x, y);
        new_div = createSvgDiv(x_max, y_max);
        new_img = createSvgImage(images[Math.floor(Math.random() * images.length)]);
        if (new_img.classList) {
          new_img.classList.add(new_class);
        } else {
          new_img.className += ' ' + new_class;
        }
        new_div.appendChild(new_img);
        parent.appendChild(new_div);
      }
      results = [];
      for (number = l = 1, ref3 = on_line; 1 <= ref3 ? l <= ref3 : l >= ref3; number = 1 <= ref3 ? ++l : --l) {
        x = x_start * -1;
        y = y_start - Math.floor((y_max / on_line) * number);
        new_class = generateClass(x, y);
        new_div = createSvgDiv(x_max, y_max);
        new_img = createSvgImage(images[Math.floor(Math.random() * images.length)]);
        if (new_img.classList) {
          new_img.classList.add(new_class);
        } else {
          new_img.className += ' ' + new_class;
        }
        new_div.appendChild(new_img);
        results.push(parent.appendChild(new_div));
      }
      return results;
    };
  };

}).call(this);
